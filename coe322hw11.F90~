! Ethan Chang - ehc586
! Ethan Colley - ebc742
! Jason Kim - jk46965

Program LinkedList

  implicit none

  integer :: input

  type node
     integer :: value
     type(node),pointer :: next
  end type node

  type list
     type(node),pointer :: head
  end type list
  
  type(list) :: the_list

  nullify(the_list%head)

  read *, input
  do while(input .ne. 0)
    call insert(the_list,input)
    call print(the_list)
    read *, input
  end do

contains
  
  subroutine insert( the_list,input )
    implicit none
    ! parameters
    integer,intent(inout) :: input
    type(list),intent(inout) :: the_list
    type(node),pointer :: new_node, current, previous
    allocate(new_node); new_node%value = input
    ! local
    if (.not.associated(the_list%head)) then
       nullify(new_node%next)
       the_list%head => new_node
    else
       current => the_list%head
       if(current%value .ge. new_node%value) then
          nullify(new_node%next)
          do while(associated(current%next))
             previous => current
             current => current%next
             current%next%value = previous
          end do
          the_list%head => new_node
          
       else
          do while(current%value .le. new_node%value .and. associated(current%next))
             previous => current
             current => current%next
          end do
          nullify(new_node%next)
          current%next => new_node
       end if
    end if
    
  end subroutine insert
  
  integer function length( the_list )
    implicit none
    type(list),intent(in) :: the_list
    ! local
    type(node),pointer :: current

    if (.not.associated(the_list%head)) then
       length = 0
    else
       current => the_list%head       
       do
          length = length+1
          if (.not.associated(current%next)) exit
          current => current%next
       end do
    end if
  end function length

  subroutine print(the_list)
    implicit none
    type(list),intent(in) :: the_list
    type(node),pointer :: current

    write(*,'("List: [ ")',advance="no")
    if (associated(the_list%head)) then
       current => the_list%head
       do while (associated(current))
          write(*,'(i2",")',advance="no") current%value
          if (.not.associated(current%next)) exit
          current => current%next
       end do
    end if
    write(*,'(x"]")')

  end subroutine print
  
end Program LinkedList
